# SPDX-FileCopyrightText: 2023 Simon Dalvai <info@simondalvai.org>

# SPDX-License-Identifier: CC0-1.0

name: iOS upload

on:
  push:
    paths:
      - "version"
      - ".github/workflows/upload-ios.yml"
      - "exportOptions.plist"
      - "export_presets.ios.example"

env:
  GODOT_VERSION: 4.3
  PROJECT_NAME: FutsalManager
  WORKING_DIRECTORY: game
  IOS_APPSTORE_TEAM_ID: ${{ secrets.IOS_APPSTORE_TEAM_ID }}
  IOS_APPLE_ID_USERNAME: ${{ secrets.IOS_APPLE_ID_USERNAME }}
  IOS_APPLE_ID_PASSWORD: ${{ secrets.IOS_APPLE_ID_PASSWORD }}
  BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
  P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
  BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
  KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}

jobs:
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: macos-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Set version and short version
        run: echo "VERSION=$(cat version | cut -f1 -d-)" >> $GITHUB_ENV

      - name: Create and config export_presets.cfg
        run: |
          cp game/export_presets.ios.example game/export_presets.cfg
          sed -i -e "s|VERSION_CODE|$VERSION|g" $WORKING_DIRECTORY/export_presets.cfg
          sed -i -e "s|VERSION_NAME|$VERSION|g" $WORKING_DIRECTORY/export_presets.cfg
          sed -i -e "s|IOS_APPSTORE_TEAM_ID|$IOS_APPSTORE_TEAM_ID|g" $WORKING_DIRECTORY/export_presets.cfg

      - name: Export and upload
        uses: dulvui/godot4-ios-export@v1
        with:
          working-directory: $WORKING_DIRECTORY
          godot-version: $GODOT_VERSION
      
      # Build project and uplaod to TestFlight
      - name: Extract Provisioning profile UUID and create PP_UUID env variable
        run: echo "PP_UUID=$(grep -a -A 1 'UUID' $PP_PATH | grep string | sed -e "s|<string>||" -e "s|</string>||" | tr -d '\t')" >> $GITHUB_ENV

      - name: Resolve package dependencies
        run: xcodebuild -resolvePackageDependencies

      - name: Build the xarchive
        run: |
          set -eo pipefail
          xcodebuild  clean archive \
            -scheme $PROJECT_NAME \
            -configuration "Release" \
            -sdk iphoneos \
            -archivePath "$PWD/build/$PROJECT_NAME.xcarchive" \
            -destination "generic/platform=iOS,name=Any iOS Device" \
            OTHER_CODE_SIGN_FLAGS="--keychain $RUNNER_TEMP/app-signing.keychain-db" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE=$PP_UUID \
            CODE_SIGN_IDENTITY="Apple Distribution"

      - name: Export .ipa
        run: |
          set -eo pipefail
          xcodebuild -archivePath "$PWD/build/$PROJECT_NAME.xcarchive" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath $PWD/build \
            -allowProvisioningUpdates \
            -exportArchive

      - name: Publish the App on TestFlight
        if: success()
        run: |
          xcrun altool \
            --upload-app \
            -t ios \
            -f $PWD/build/*.ipa \
            -u "${{ secrets.APPLE_ID_USERNAME }}" \
            -p "${{ secrets.APPLE_ID_PASSWORD }}" \
            --verbose

